  # Default values for qaq.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.

  replicaCount: 1

  image:
    repository: nginx
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  secret:
    feishu:
      FEISHU_APP_ID: ""
      FEISHU_APP_SECRET: ""
      FEISHU_ENCRYPT_KEY: ""
      FEISHU_VERIFICATION_TOKEN: ""
    mysql:
      MYSQL_SERVER: ""
      MYSQL_PORT: ""
      MYSQL_USER: ""
      MYSQL_PASSWORD: ""
    rsa:
      RSA_PUBLICKEY: ""
      RSA_PRIVATEKEY: ""
    QAQ_ADMIN: ""
    QAQ_HOST: ""

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  livenessProbe:
    httpGet:
      path: /
      port: http
  readinessProbe:
    httpGet:
      path: /
      port: http

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}

  gateway:
    role: gateway
    image:
      repository: blacklee123/gateway
      tag: 2.1.1
    scaling:
      replicas: 1
      revisionHistoryLimit: 3
    containers:
      ports:
        - name: http
          containerPort: 9999
          protocol: TCP
      args: []
      env: []
      volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      # TODO: Validate configuration
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
        limits:
          cpu: 250m
          memory: 400Mi
    automountServiceAccountToken: true
    volumes:
      # Create on-disk volume to store exec logs (required)
      - name: tmp-volume
        emptyDir: {}
    nodeSelector: {}
    # Labels & annotations shared between API related resources
    labels: {}
    annotations: {}

  uniauth:
    role: uniauth
    image:
      repository: docker.io/kubernetesui/dashboard-auth
      tag: 1.1.3
    scaling:
      replicas: 1
      revisionHistoryLimit: 3
    containers:
      ports:
        - name: auth
          containerPort: 8089
          protocol: TCP
      args: []
      env: []
      volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      # TODO: Validate configuration
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
        limits:
          cpu: 250m
          memory: 400Mi
    automountServiceAccountToken: true
    volumes:
      # Create on-disk volume to store exec logs (required)
      - name: tmp-volume
        emptyDir: {}
    nodeSelector: {}
    # Labels & annotations shared between API related resources
    labels: {}
    annotations: {}

  uniauth-web:
    role: uniauth-web
    image:
      repository: docker.io/kubernetesui/dashboard-auth
      tag: 1.1.3
    scaling:
      replicas: 1
      revisionHistoryLimit: 3
    containers:
      ports:
        - name: auth
          containerPort: 80
          protocol: TCP
      args: []
      env: []
      volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      # TODO: Validate configuration
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
        limits:
          cpu: 250m
          memory: 400Mi
    automountServiceAccountToken: true
    volumes:
      # Create on-disk volume to store exec logs (required)
      - name: tmp-volume
        emptyDir: {}
    nodeSelector: {}
    # Labels & annotations shared between API related resources
    labels: {}
    annotations: {}

  upload:
    enable: false
    role: upload
    image:
      repository: docker.io/kubernetesui/dashboard-auth
      tag: 1.1.3
    scaling:
      replicas: 1
      revisionHistoryLimit: 3
    containers:
      ports:
        - name: auth
          containerPort: 10002
          protocol: TCP
      args: []
      env: []
      volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      # TODO: Validate configuration
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
        limits:
          cpu: 250m
          memory: 400Mi
    automountServiceAccountToken: true
    volumes:
      # Create on-disk volume to store exec logs (required)
      - name: tmp-volume
        emptyDir: {}
    nodeSelector: {}
    # Labels & annotations shared between API related resources
    labels: {}
    annotations: {}
